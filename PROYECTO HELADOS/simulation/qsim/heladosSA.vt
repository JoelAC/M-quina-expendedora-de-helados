// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "08/21/2018 11:16:06"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    bin2bcd9
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module bin2bcd9_vlg_sample_tst(
	num_bin,
	sampler_tx
);
input [8:0] num_bin;
output sampler_tx;

reg sample;
time current_time;
always @(num_bin)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module bin2bcd9_vlg_check_tst (
	num_bcd,
	sampler_rx
);
input [10:0] num_bcd;
input sampler_rx;

reg [10:0] num_bcd_expected;

reg [10:0] num_bcd_prev;

reg [10:0] num_bcd_expected_prev;

reg [10:0] last_num_bcd_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:1] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 1'b1;
end

// update real /o prevs

always @(trigger)
begin
	num_bcd_prev = num_bcd;
end

// update expected /o prevs

always @(trigger)
begin
	num_bcd_expected_prev = num_bcd_expected;
end


// expected num_bcd[ 10 ]
initial
begin
	num_bcd_expected[10] = 1'bX;
end 
// expected num_bcd[ 9 ]
initial
begin
	num_bcd_expected[9] = 1'bX;
end 
// expected num_bcd[ 8 ]
initial
begin
	num_bcd_expected[8] = 1'bX;
end 
// expected num_bcd[ 7 ]
initial
begin
	num_bcd_expected[7] = 1'bX;
end 
// expected num_bcd[ 6 ]
initial
begin
	num_bcd_expected[6] = 1'bX;
end 
// expected num_bcd[ 5 ]
initial
begin
	num_bcd_expected[5] = 1'bX;
end 
// expected num_bcd[ 4 ]
initial
begin
	num_bcd_expected[4] = 1'bX;
end 
// expected num_bcd[ 3 ]
initial
begin
	num_bcd_expected[3] = 1'bX;
end 
// expected num_bcd[ 2 ]
initial
begin
	num_bcd_expected[2] = 1'bX;
end 
// expected num_bcd[ 1 ]
initial
begin
	num_bcd_expected[1] = 1'bX;
end 
// expected num_bcd[ 0 ]
initial
begin
	num_bcd_expected[0] = 1'bX;
end 
// generate trigger
always @(num_bcd_expected or num_bcd)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected num_bcd = %b | ",num_bcd_expected_prev);
	$display("| real num_bcd = %b | ",num_bcd_prev);
`endif
	if (
		( num_bcd_expected_prev[0] !== 1'bx ) && ( num_bcd_prev[0] !== num_bcd_expected_prev[0] )
		&& ((num_bcd_expected_prev[0] !== last_num_bcd_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port num_bcd[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", num_bcd_expected_prev);
		$display ("     Real value = %b", num_bcd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_num_bcd_exp[0] = num_bcd_expected_prev[0];
	end
	if (
		( num_bcd_expected_prev[1] !== 1'bx ) && ( num_bcd_prev[1] !== num_bcd_expected_prev[1] )
		&& ((num_bcd_expected_prev[1] !== last_num_bcd_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port num_bcd[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", num_bcd_expected_prev);
		$display ("     Real value = %b", num_bcd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_num_bcd_exp[1] = num_bcd_expected_prev[1];
	end
	if (
		( num_bcd_expected_prev[2] !== 1'bx ) && ( num_bcd_prev[2] !== num_bcd_expected_prev[2] )
		&& ((num_bcd_expected_prev[2] !== last_num_bcd_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port num_bcd[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", num_bcd_expected_prev);
		$display ("     Real value = %b", num_bcd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_num_bcd_exp[2] = num_bcd_expected_prev[2];
	end
	if (
		( num_bcd_expected_prev[3] !== 1'bx ) && ( num_bcd_prev[3] !== num_bcd_expected_prev[3] )
		&& ((num_bcd_expected_prev[3] !== last_num_bcd_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port num_bcd[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", num_bcd_expected_prev);
		$display ("     Real value = %b", num_bcd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_num_bcd_exp[3] = num_bcd_expected_prev[3];
	end
	if (
		( num_bcd_expected_prev[4] !== 1'bx ) && ( num_bcd_prev[4] !== num_bcd_expected_prev[4] )
		&& ((num_bcd_expected_prev[4] !== last_num_bcd_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port num_bcd[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", num_bcd_expected_prev);
		$display ("     Real value = %b", num_bcd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_num_bcd_exp[4] = num_bcd_expected_prev[4];
	end
	if (
		( num_bcd_expected_prev[5] !== 1'bx ) && ( num_bcd_prev[5] !== num_bcd_expected_prev[5] )
		&& ((num_bcd_expected_prev[5] !== last_num_bcd_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port num_bcd[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", num_bcd_expected_prev);
		$display ("     Real value = %b", num_bcd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_num_bcd_exp[5] = num_bcd_expected_prev[5];
	end
	if (
		( num_bcd_expected_prev[6] !== 1'bx ) && ( num_bcd_prev[6] !== num_bcd_expected_prev[6] )
		&& ((num_bcd_expected_prev[6] !== last_num_bcd_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port num_bcd[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", num_bcd_expected_prev);
		$display ("     Real value = %b", num_bcd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_num_bcd_exp[6] = num_bcd_expected_prev[6];
	end
	if (
		( num_bcd_expected_prev[7] !== 1'bx ) && ( num_bcd_prev[7] !== num_bcd_expected_prev[7] )
		&& ((num_bcd_expected_prev[7] !== last_num_bcd_exp[7]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port num_bcd[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", num_bcd_expected_prev);
		$display ("     Real value = %b", num_bcd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_num_bcd_exp[7] = num_bcd_expected_prev[7];
	end
	if (
		( num_bcd_expected_prev[8] !== 1'bx ) && ( num_bcd_prev[8] !== num_bcd_expected_prev[8] )
		&& ((num_bcd_expected_prev[8] !== last_num_bcd_exp[8]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port num_bcd[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", num_bcd_expected_prev);
		$display ("     Real value = %b", num_bcd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_num_bcd_exp[8] = num_bcd_expected_prev[8];
	end
	if (
		( num_bcd_expected_prev[9] !== 1'bx ) && ( num_bcd_prev[9] !== num_bcd_expected_prev[9] )
		&& ((num_bcd_expected_prev[9] !== last_num_bcd_exp[9]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port num_bcd[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", num_bcd_expected_prev);
		$display ("     Real value = %b", num_bcd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_num_bcd_exp[9] = num_bcd_expected_prev[9];
	end
	if (
		( num_bcd_expected_prev[10] !== 1'bx ) && ( num_bcd_prev[10] !== num_bcd_expected_prev[10] )
		&& ((num_bcd_expected_prev[10] !== last_num_bcd_exp[10]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port num_bcd[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", num_bcd_expected_prev);
		$display ("     Real value = %b", num_bcd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_num_bcd_exp[10] = num_bcd_expected_prev[10];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module bin2bcd9_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [8:0] num_bin;
// wires                                               
wire [10:0] num_bcd;

wire sampler;                             

// assign statements (if any)                          
bin2bcd9 i1 (
// port map - connection between master ports and signals/registers   
	.num_bcd(num_bcd),
	.num_bin(num_bin)
);
// num_bin[ 8 ]
initial
begin
	num_bin[8] = 1'b0;
end 
// num_bin[ 7 ]
initial
begin
	num_bin[7] = 1'b0;
end 
// num_bin[ 6 ]
initial
begin
	num_bin[6] = 1'b0;
	num_bin[6] = #640000 1'b1;
end 
// num_bin[ 5 ]
initial
begin
	num_bin[5] = 1'b0;
	num_bin[5] = #320000 1'b1;
	num_bin[5] = #320000 1'b0;
	num_bin[5] = #320000 1'b1;
end 
// num_bin[ 4 ]
initial
begin
	repeat(3)
	begin
		num_bin[4] = 1'b0;
		num_bin[4] = #160000 1'b1;
		# 160000;
	end
	num_bin[4] = 1'b0;
end 
// num_bin[ 3 ]
initial
begin
	repeat(6)
	begin
		num_bin[3] = 1'b0;
		num_bin[3] = #80000 1'b1;
		# 80000;
	end
	num_bin[3] = 1'b0;
end 
// num_bin[ 2 ]
initial
begin
	repeat(12)
	begin
		num_bin[2] = 1'b0;
		num_bin[2] = #40000 1'b1;
		# 40000;
	end
	num_bin[2] = 1'b0;
end 
// num_bin[ 1 ]
always
begin
	num_bin[1] = 1'b0;
	num_bin[1] = #20000 1'b1;
	#20000;
end 
// num_bin[ 0 ]
always
begin
	num_bin[0] = 1'b0;
	num_bin[0] = #10000 1'b1;
	#10000;
end 

bin2bcd9_vlg_sample_tst tb_sample (
	.num_bin(num_bin),
	.sampler_tx(sampler)
);

bin2bcd9_vlg_check_tst tb_out(
	.num_bcd(num_bcd),
	.sampler_rx(sampler)
);
endmodule

